!(function(h) {
  'use strict';
  var a = {};
  function o() {
    (this.positionX = 0), (this.positionY = 0), (this.offsetX = 0), (this.offsetY = 0);
  }
  function e(t, e) {
    (this.options = this.parseOptions(e)),
      (this.$container = h(t)),
      (this.$current = null),
      (this.$target = null),
      (this.$clone = null),
      (this.mouse = new o()),
      (this.holding = !1),
      (this.dragging = !1),
      (this.dropzones = []),
      this.setActive(this.options.active),
      this.setup();
  }
  (a.supportsTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints),
    (a.shouldScroll = !0),
    a.supportsTouch &&
      document.addEventListener(
        'touchmove',
        function(t) {
          a.shouldScroll || t.preventDefault();
        },
        { passive: !1 }
      ),
    (e.defaultOptions = {
      active: !0,
      draggable: !(o.prototype.update = function(t) {
        var e, o;
        a.supportsTouch && 'touchmove' == t.type
          ? ((e = t.originalEvent.touches[0]),
            (o = document.elementFromPoint(e.clientX, e.clientY)),
            h(o).trigger('touchenter'),
            (this.positionX = e.pageX),
            (this.positionY = e.pageY))
          : ((this.positionX = t.pageX), (this.positionY = t.pageY));
      }),
      exchangeable: !0,
      transition: 200,
      placeholderTarget: !1,
      placeholderTemplate: '<div />'
    }),
    (e.prototype.parseOptions = function(i) {
      var s = h.extend(!0, {}, e.defaultOptions);
      return (
        i &&
          h.each(s, function(t, e) {
            var o = i[t];
            void 0 !== o && (s[t] = 'object' == typeof o ? h.extend(s[t], o) : o);
          }),
        s
      );
    }),
    (e.prototype.setup = function() {
      var s = this;
      this.$container.css({
        position: 'relative',
        '-webkit-touch-callout': 'none',
        '-webkit-user-select': 'none',
        '-khtml-user-select': 'none',
        '-moz-user-select': 'none',
        '-ms-user-select': 'none',
        'user-select': 'none'
      }),
        this.$container.find('img').attr('ondragstart', 'return false'),
        this.$container.on('mouseenter touchenter', function(t) {
          var e, o, i;
          s.$current &&
            ((o = !(e = h(this)).is(s.$current)),
            (i = s.options.exchangeable),
            s.dragging && o && i && ((s.$current = e), s.updatePlaceholder(t, e, !0)));
        }),
        this.$container.on('mousedown touchstart', '> *', function(t) {
          var e = h(this);
          s.prepare(t, e);
        }),
        this.$container.on('mouseenter touchenter', '> *', function(t) {
          var e, o, i;
          s.$current &&
            ((e = h(this)),
            (o = !!s.$current.find(this).length),
            (i = s.options.exchangeable),
            s.dragging && (o || i) && s.updatePlaceholder(t, e));
        }),
        h('body').on('mousemove touchmove', this.update.bind(this)),
        h('body').on('mouseup touchend', this.end.bind(this)),
        h('body').on('mouseleave', this.end.bind(this)),
        h(window).on('blur', this.end.bind(this));
    }),
    (e.prototype.prepare = function(t, e) {
      var o = this.options.draggable,
        i = o && h(o);
      this.active &&
        (!i || (i.is(t.target) || i.find(t.target).length)) &&
        ((this.holding = !0), (this.$target = e), (this.$current = e.closest(this.$container)), this.mouse.update(t));
    }),
    (e.prototype.start = function(t) {
      var e = this.$target,
        o = e
          .clone()
          .css({
            position: 'absolute',
            zIndex: 9999,
            pointerEvents: 'none',
            height: e.outerHeight(),
            width: e.outerWidth()
          }),
        i = h(this.options.placeholderTemplate).css({
          position: 'absolute',
          pointerEvents: 'none',
          zIndex: 9998,
          margin: 0,
          padding: 0,
          height: e.outerHeight(),
          width: e.outerWidth()
        });
      (this.mouse.offsetX = this.mouse.positionX - e.offset().left),
        (this.mouse.offsetY = this.mouse.positionY - e.offset().top),
        e.css('visibility', 'hidden'),
        e.attr('data-dad-target', !0),
        a.supportsTouch && (a.shouldScroll = !1),
        (this.dragging = !0),
        (this.$target = e),
        (this.$clone = o),
        (this.$placeholder = i),
        this.$current.append(i).append(o),
        this.updateClonePosition(),
        this.updatePlaceholderPosition();
    }),
    (e.prototype.update = function(t) {
      this.mouse.update(t),
        this.holding && !this.dragging && this.start(t),
        this.dragging && this.updateClonePosition();
    }),
    (e.prototype.end = function(t) {
      var e, o, i, s, n, r;
      (this.holding = !1),
        this.dragging &&
          (a.supportsTouch && (a.shouldScroll = !0),
          (e = this.$current),
          (o = this.$target),
          (i = this.$clone),
          (s = this.$placeholder),
          (n = o.offset().left - e.offset().left),
          (r = o.offset().top - e.offset().top),
          h(e).trigger('dadDropStart', [ o[0] ]),
          i.animate(
            { top: r, left: n, height: o.outerHeight(), width: o.outerWidth() },
            this.options.transition,
            function() {
              i.remove(),
                s.remove(),
                o.removeAttr('data-dad-target'),
                o.css('visibility', ''),
                h(e).trigger('dadDropEnd', [ o[0] ]);
            }
          ),
          (this.dragging = !1),
          (this.$current = null),
          (this.$target = null),
          (this.$clone = null),
          (this.$placeholder = null));
    }),
    (e.prototype.updateClonePosition = function() {
      var t = this.mouse.positionY - this.$current.offset().top - this.mouse.offsetY,
        e = this.mouse.positionX - this.$current.offset().left - this.mouse.offsetX;
      this.$clone.css({ top: t, left: e });
    }),
    (e.prototype.updatePlaceholder = function(t, e, o) {
      o
        ? (e.append(this.$target), e.append(this.$clone), e.append(this.$placeholder))
        : e.index() > this.$target.index() ? e.after(this.$target) : e.before(this.$target),
        this.updatePlaceholderPosition();
    }),
    (e.prototype.updatePlaceholderPosition = function() {
      var t = this.options.placeholderTarget,
        e = t ? this.$target.find(t) : this.$target,
        o = e.offset().top - this.$current.offset().top,
        i = e.offset().left - this.$current.offset().left,
        s = e.outerHeight(),
        n = e.outerWidth();
      this.$placeholder.css({ top: o, left: i, width: n, height: s });
    }),
    (e.prototype.onDrop = function(t, e) {
      h(t).on('mouseenter touchenter', function(t) {
        h(this).attr('data-dad-active', !0);
      });
    }),
    (e.prototype.setActive = function(t) {
      (this.active = t), this.$container.attr('data-dad-active', t);
    }),
    (e.prototype.activate = function() {
      this.setActive(!0);
    }),
    (e.prototype.deactivate = function() {
      this.setActive(!1);
    }),
    (h.fn.dad = function(t) {
      return new e(this, t);
    });
})(jQuery);
